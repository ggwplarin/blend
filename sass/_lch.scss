@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use 'array';
@use 'convert';

@function LCH_to_sRGB($LCH) {
  // convert an array of CIE LCH values
  // to CIE Lab, and then to XYZ,
  // adapt from D50 to D65,
  // then convert XYZ to linear-light sRGB
  // and finally to gamma corrected sRGB
  // for in-gamut colors, components are in the 0.0 to 1.0 range
  // out of gamut colors may have negative components
  // or components greater than 1.0
  // so check for that :)

  @return convert.gam_sRGB(
    convert.XYZ_to_lin_sRGB(
      convert.D50_to_D65(
        convert.Lab_to_XYZ(
          convert.LCH_to_Lab($LCH)
        )
      )
    )
  );
}

@function _isLCH_in_sRGB(
  $a,
  $b
) {
  $E: 0.000005;
  @return $a and ($b >= (0 - $E)) and ($b <= (1 + $E));
}

@function isLCH_in_sRGB($l, $c, $h) {
  $rgb: LCH_to_sRGB([$l, $c, $h]);
  @return array.reduce(
    $rgb,
    meta.get-function('_isLCH_in_sRGB'),
    true
  );
}

@function force_into_sRGB_gamut($l, $c, $h) {
  // Moves an lch color into the sRGB gamut
  // by holding the l and h steady,
  // and adjusting the c via binary-search
  // until the color is on the sRGB boundary.
  @if (isLCH_in_sRGB($l, $c, $h)) {
    @return [$l, $c, $h];
  }

  $hiC: $c;
  $loC: 0;

  $c: $c / 2;

  // 0.0001 chosen fairly arbitrarily as "close enough"
  @while (($hiC - $loC) > 0.0001) {
    @if (isLCH_in_sRGB($l,$c,$h)) {
      $loC: $c;
    } @else {
      $hiC: $c;
    }
    $c: ($hiC + $loC) / 2;
  }

  @return [$l, $c, $h];
}

@function _sRGB-channel(
  $x
) {
  @return math.round($x * 10000) / 100 * 1%;
}

@function LCH_to_sRGB_value(
  $lch,
  $a: 100%,
  $force: true
) {
  @if ($force) {
    $lch: force_into_sRGB_gamut($lch...);
  }

  $rgb: array.map(
    LCH_to_sRGB($lch),
    meta.get-function('_sRGB-channel')
  );
  $rgb: list.join((), $rgb, comma);
  $a: if($a < 100, ' / #{$a}', null);

  @return string.unquote('rgb(#{$rgb}#{$a})');
}

@function _strip-unit(
  $x
) {
  @return $x / ($x * 0 + 1);
}

@function lch(
  $lch,
  $a: 100%
) {
  $lch: array.map($lch, meta.get-function('_strip-unit'));
  @return LCH_to_sRGB_value($lch, $a);
}
