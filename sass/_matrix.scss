@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';
@use 'array';
@use 'throw';

// Inspection

@function is-2d(
  $matrix
) {
  @return if(
    list.length($matrix) > 0,
    (meta.type-of(list.nth($matrix, 1)) == 'list'),
    false
  );
}

@function force-2d(
  $matrix
) {
  @return if(
    is-2d($matrix),
    $matrix,
    list.append(
      array.template($matrix),
      $matrix
    )
  );
}

// Validation

@function _invalid-items(
  $matrix,
  $list: true
) {
  $item-error: false;

  @if (list.length($matrix) > 0) {
    $first: list.nth($matrix, 1);
    $first-type: meta.type-of($first);
    $length: if($first-type == 'list', list.length($first), null);

    @each $item in $matrix {
      $type: meta.type-of($item);
      $item-error: $item-error or ($type != $first-type);

      @if ($type == 'list') and ($list) {
        $length-error: list.length($item) != $length;
        $item-error: $item-error or $length-error or _invalid-items($item, false);
      } @else if ($type != 'number') {
        $item-error: true;
      }
    }
  }

  @return $item-error;
}

@function is-valid(
  $matrix,
  $error: true
) {
  // must be a list
  $type-error: throw.type($matrix, 'list', 'matrix.is-valid()', 'matrix');
  @if ($type-error) { @return if($error, $type-error, false); }

  @if (_invalid-items($matrix)) {
    $item-error: throw.error(
      'Matrix items must be numbers, or equal-length lists of numbers',
      'matrix.is-valid()',
    );
    @if ($item-error) { @return if($error, $item-error, false); }
  }

  @return $matrix;
}

// types

@function is(
  $value,
  $expect: null
) {
  $type: meta.type-of($value);

  @if ($type == 'number') {
    $type: 'scalar';
  } @else if ($type == 'list') and (is-valid($value)) {
    @if (is-2d($value)) {
      $type: 'matrix';
    } @else {
      $type: 'vector';
    }
  } @else {
    @return throw.error(
      '$value should be a scalar, matrix, or vector. Got: #{$value}',
      'matrix.is()'
    );
  }

  @return if($expect, ($type == $expect), $type);
}

// Methods

@function size(
  $matrix,
  $get: false
) {
  $is: is($matrix);

  @if ($is == 'scalar') {
    @return if($get, 0, []);
  }

  @if ($is == 'matrix') {
    $rows: list.length($matrix);
    $columns: list.length(nth($matrix, 1));

    @if ($get == 'columns') {
      @return $columns;
    } @else if ($get == 'rows') {
      @return $rows;
    }

    @return [ $rows, $columns ];
  }

  $length: list.length($matrix);

  @if ($get == 'columns') {
    @return $length;
  } @else if ($get == 'rows') {
    @return 0;
  }

  @return [$length];
}

// Alterations

@function squeeze(
  $matrix
) {
  $rows: size($matrix, 'rows');

  @if ($rows == 1) {
    @return squeeze(list.nth($matrix, 1));
  }

  @return $matrix;
}

@function transpose(
  $matrix
) {
  $matrix: force-2d(is-valid($matrix));
  $trans: array.template($matrix);
  $row-template: array.template(list.nth($matrix, 1));

  @for $i from 1 through list.length(list.nth($matrix, 1)) {
    $row: $row-template;

    @each $list in $matrix {
      $row: list.append($row, list.nth($list, $i));
    }

    $trans: list.append($trans, $row);
  }

  @return $trans;
}

// Access

@function get(
  $matrix,
  $index
) {
  $matrix: is-valid($matrix);
  $index: if(meta.type-of($index) != 'list', ($index), $index);

  $found: $matrix;

  @each $i in $index {
    $found: list.nth($found, $i);
  }

  @return $found;
}

@function set(
  $matrix,
  $index,
  $value
) {
  $matrix: is-valid($matrix);

  @if (meta.type-of($index) == 'list') {
    @if (list.length($index) > 1) {
      $i: list.nth($index, 1);
      $value: set(
        list.nth($matrix, $i),
        array.slice($index, 1),
        $value
      );
      $index: $i;
    } @else {
      $index: nth($index, 1);
    }
  }

  @return list.set-nth($matrix, $index, $value);
}

// Math

@function _scalar-multiply(
  $matrix,
  $scalar,
) {
  @if (is-2d($matrix)) {
    $product: array.template($matrix);

    @each $array in $matrix {
      $row: array.multiply($array, $scalar);
      $product: list.append($product, $row);
    }

    @return $product;
  }

  @return array.multiply($matrix, $scalar);
}

@function _matrix-multiply(
  $left,
  $right
) {
  // validate
  $right: transpose($right);
  $product: array.template($left);

  @each $l-row in $left {
    $row: array.template($l-row);
    @each $r-row in $right {
      $sum: array.sum(array.multiply($l-row, $r-row));
      $row: list.append($row, $sum);
    }
    $product: list.append($product, $row);
  }

  @return $product;
}

@function multiply(
  $left,
  $right
) {
  $lis: is($left);
  $ris: is($right);
  $lris: ($lis $ris);

  // handle matched-value math
  @if ($lis == $ris) {
    @if ($lis == 'scalar') {
      @return $left * $right;
    } @else if ($lis == 'vector') {
      @return array.multiply($left, $right);
    }

    @if (size($left, 'columns') != size($right, 'rows')) {
      @return throw.error(
        'Left matrix columns must equal right matrix rows',
        'matrix.multiply()'
      );
    }

    @return _matrix-multiply($left, $right);
  }

  // handle scalar math
  $si: list.index($lris, 'scalar');

  @if ($si) {
    $mi: if(($si == 1), 2, 1);
    $lr: ($left $right);

    @return _scalar-multiply(
      list.nth($lr, $mi),
      list.nth($lr, $si)
    );
  }

  // left vectors with right matrix
  @if ($lis == 'vector') {
    @if (list.length($left) != size($right, 'rows')) {
      @return throw.error(
        'Left vector length must equal right matrix rows',
        'matrix.multiply()'
      );
    }

    @return squeeze(
      _matrix-multiply(
        force-2d($left),
        $right
      )
    );
  }

  // right vectors with left matrix
  @if (size($left, 'columns') != list.length($right)) {
    @return throw.error(
      'Left matrix columns must equal right vector length',
      'matrix.multiply()'
    );
  }

  $product: _matrix-multiply($left, transpose($right));
  @for $i from 1 through list.length($product) {
    $product: list.set-nth(
      $product,
      $i,
      list.nth(
        list.nth($product, $i),
        1
      )
    );
  }
  @return $product;
}
