@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use '../config';
@use '../utils/channel';
@use '../utils/throw';
@use '../convert';
@use '../output';

$functions: meta.module-functions('convert');

$convert: (
  'sass': map.get($functions, 'LCH-to-sRGB'),
  'rgb': map.get($functions, 'LCH-to-sRGB'),
  'lab': map.get($functions, 'LCH-to-Lab'),
  'p3': map.get($functions, 'LCH-to-P3'),
  'r2020': map.get($functions, 'LCH-to-r2020'),
  'cmyk': (
    map.get($functions, 'LCH-to-sRGB')
    map.get($functions, 'naive-sRGB-to-CMYK')
  ),
);

@function to(
  $lch,
  $format: config.$output,
) {
  $fns: map.get($convert, string.to-lower-case($format));

  @if (not $fns) {
    @return throw.error(
      '#{$format} (#{$fn}) is not an available function',
      'lch.to()'
    );
  }

  @each $fn in $fns {
    $lch: meta.call($fn, $lch);
  }

  @return $lch;
}

@function is-in(
  $lch,
  $format: config.$output,
) {
  $result: to($lch, $format);
  $in: channel.in-gamut($result);
  @return if($in, $result, null);
}

// gamut correction
@function gamut-correct(
  $l, $c, $h,
  $format: config.$output,
) {
  // Moves an lch color into the sRGB gamut
  // by holding the l and h steady,
  // and adjusting the c via binary-search
  // until the color is on the sRGB boundary.
  $input: ($l, $c, $h);
  $output: is-in($l $c $h, $format);

  @if (not $output) {
    $hiC: $c;
    $loC: 0;

    $c: $c / 2;

    // 0.0001 chosen fairly arbitrarily as "close enough"
    @while (($hiC - $loC) > 0.0001) {
      @if (is-in($l $c $h, $format)) {
        $loC: $c;
      } @else {
        $hiC: $c;
      }
      $c: ($hiC + $loC) / 2;
    }

    $output: to($l $c $h, $format);
  }

  @return (
    'input': $input,
    'adjusted': ($l, $c, $h),
    'output': $output,
  );
}

@function value(
  $lch,
  $a: 100%,
  $to: config.$output,
  $gamut-correct: config.$gamut-correct,
) {
  @if ($to == 'lch') {
    @return output.string($lch, $a, $to);
  }

  @if ($gamut-correct == null) {
    @return is-in($lch, $to);
  }

  $result: to($lch, $to);

  @if ($to == 'lab') {
    $result: channel.values($result, 1);
    @return output.string($result, $a, $to);
  }

  @if ($gamut-correct) and (not channel.in-gamut($result)) {
    $args: list.append($lch, $to);
    $result: map.get(gamut-correct($args...), 'output');
  }

  $result: if(
    list.index('p3' 'r2020' 'cmyk', $to),
    channel.values($result, 1, 10000),
    channel.values($result)
  );

  @return output.value($result, $a, $to);
}
