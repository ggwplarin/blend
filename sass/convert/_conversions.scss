@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use '../utils/array';
@use '../utils/matrix';
@use '../utils/pow';

// *********************
// Based on: https://drafts.csswg.org/css-color-4/conversions.js
// Credit: Chris Lilley, https://svgees.us/
// *********************

$Im: 216/24389;  // 6^3/29^3
$Io: 24389/27;   // 29^3/3^3
$Ip: 1.09929682680944 ;
$I2: 0.018053968510807;
$white: [0.96422, 1.00000, 0.82521]; // D50 reference white

// Sample code for color conversions
// Conversion can also be done using ICC profiles and a Color Management System
// For clarity, a library is used for matrix manipulations

// sRGB-related functions

@function _lin_sRGB($val) {
  @if ($val < 0.04045) {
    @return $val / 12.92;
  }

  @return math.pow(($val + 0.055) / 1.055, 2.4);
}

// rgb [0, 1] <-->
@function lin_sRGB($RGB) {
  // convert an array of sRGB values in the range 0.0 - 1.0
  // to linear light (un-companded) form.
  // https://en.wikipedia.org/wiki/SRGB
  @return array.map($RGB, meta.get-function('_lin_sRGB'));
}

@function _gam_sRGB($val) {
  @if ($val > 0.0031308) {
    @return 1.055 * math.pow($val, 1/2.4) - 0.055;
  }

  @return 12.92 * $val;
}

// rgb [0, 1] <-->
@function gam_sRGB($RGB) {
  // convert an array of linear-light sRGB values in the range 0.0-1.0
  // to gamma corrected form
  // https://en.wikipedia.org/wiki/SRGB
  @return array.map($RGB, meta.get-function('_gam_sRGB'));
}

// rgb [0, 1] -> xyz
@function lin_sRGB_to_XYZ($rgb) {
  // convert an array of linear-light sRGB values to CIE XYZ
  // using sRGB's own white, D65 (no chromatic adaptation)
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  // also
  // https://www.image-engineering.de/library/technotes/958-how-to-convert-between-srgb-and-ciexyz
  $M: [
    [ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],
    [ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],
    [ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ],
  ];

  @return matrix.multiply($M, $rgb);
}

// xyz -> rgb [0, 1]
@function XYZ_to_lin_sRGB($XYZ) {
  // convert XYZ to linear-light sRGB
  $M: [
    [  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],
    [ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],
    [  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ],
  ];

  @return matrix.multiply($M, $XYZ);
}

//  display-p3-related functions

// p3 [0, 1] <-->
@function lin_P3($RGB) {
  // convert an array of display-p3 RGB values in the range 0.0 - 1.0
  // to linear light (un-companded) form.

  @return lin_sRGB($RGB);  // same as sRGB
}

// p3 [0, 1] <-->
@function gam_P3($RGB) {
  // convert an array of linear-light display-p3 RGB  in the range 0.0-1.0
  // to gamma corrected form

  @return gam_sRGB($RGB);  // same as sRGB
}

// p3 [0, 1] -> xyz
@function lin_P3_to_XYZ($rgb) {
  // convert an array of linear-light display-p3 values to CIE XYZ
  // using  D65 (no chromatic adaptation)
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  $M: [
    [0.4865709486482162, 0.26566769316909306, 0.1982172852343625],
    [0.2289745640697488, 0.6917385218365064,  0.079286914093745],
    [0.0000000000000000, 0.04511338185890264, 1.043944368900976],
  ];
  // 0 was computed as -3.972075516933488e-17

  @return matrix.multiply($M, $rgb);
}

// xyz -> p3 [0, 1]
@function XYZ_to_lin_P3($XYZ) {
  // convert XYZ to linear-light P3
  $M: [
    [ 2.493496911941425,   -0.9313836179191239, -0.40271078445071684],
    [-0.8294889695615747,   1.7626640603183463,  0.023624685841943577],
    [ 0.03584583024378447, -0.07617238926804182, 0.9568845240076872],
  ];

  @return matrix.multiply($M, $XYZ);
}

// prophoto-rgb functions

@function _lin_ProPhoto($val) {
  @if ($val < 0.031248) {
    @return $val / 16;
  }

  @return math.pow($val, 1.8);
}

// prophoto [0, 1] <-->
@function lin_ProPhoto($RGB) {
  // convert an array of prophoto-rgb values in the range 0.0 - 1.0
  // to linear light (un-companded) form.
  // Transfer curve is gamma 1.8 with a small linear portion
  @return array.map($RGB, meta.get-function('_lin_ProPhoto'));
}

@function _gam_ProPhoto($val) {
  @if ($val > 0.001953) {
    @return math.pow($val, 1/1.8);
  }

  @return 16 * $val;
}

// prophoto [0, 1] <-->
@function gam_ProPhoto($RGB) {
  // convert an array of linear-light prophoto-rgb  in the range 0.0-1.0
  // to gamma corrected form
  // Transfer curve is gamma 1.8 with a small linear portion
  @return array.map($RGB, meta.get-function('_gam_ProPhoto'));
}

// prophoto [0, 1] -> xyz
@function lin_ProPhoto_to_XYZ($rgb) {
  // convert an array of linear-light prophoto-rgb values to CIE XYZ
  // using  D50 (so no chromatic adaptation needed afterwards)
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  $M: [
    [ 0.7977604896723027,  0.13518583717574031,  0.0313493495815248     ],
    [ 0.2880711282292934,  0.7118432178101014,   0.00008565396060525902 ],
    [ 0.0,                 0.0,                  0.8251046025104601     ],
  ];

  @return matrix.multiply($M, $rgb);
}

// xyz -> prophoto [0, 1]
@function XYZ_to_lin_ProPhoto($XYZ) {
  // convert XYZ to linear-light prophoto-rgb
  $M: [
    [  1.3457989731028281,  -0.25558010007997534,  -0.05110628506753401 ],
    [ -0.5446224939028347,   1.5082327413132781,    0.02053603239147973 ],
    [  0.0,                  0.0,                   1.2119675456389454  ],
  ];

  @return matrix.multiply($M, $XYZ);
}

// a98-rgb functions

@function _lin_a98rgb($val) {
  @return math.pow($val, 563/256);
}

// a98 [0, 1] <-->
@function lin_a98rgb($RGB) {
  // convert an array of a98-rgb values in the range 0.0 - 1.0
  // to linear light (un-companded) form.
  @return array.map($RGB, meta.get-function('_lin_a98rgb'));
}

@function _gam_a98rgb($val) {
  @return math.pow($val, 256/563);
}

// a98 [0, 1] <-->
@function gam_a98rgb($RGB) {
  // convert an array of linear-light a98-rgb  in the range 0.0-1.0
  // to gamma corrected form
  @return array.map($RGB, meta.get-function('_gam_a98rgb'));
}

// a98 [0, 1] -> xyz
@function lin_a98rgb_to_XYZ($rgb) {
  // convert an array of linear-light a98-rgb values to CIE XYZ
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  // has greater numerical precision than section 4.3.5.3 of
  // https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
  // but the values below were calculated from first principles
  // from the chromaticity coordinates of R G B W
  // see matrixmaker.html
  $M: [
    [ 0.5766690429101305,   0.1855582379065463,   0.1882286462349947  ],
    [ 0.29734497525053605,  0.6273635662554661,   0.07529145849399788 ],
    [ 0.02703136138641234,  0.07068885253582723,  0.9913375368376388  ],
  ];

  @return matrix.multiply($M, $rgb);
}

// xyz -> a98 [0, 1]
@function XYZ_to_lin_a98rgb($XYZ) {
  // convert XYZ to linear-light a98-rgb
  $M: [
    [  2.0415879038107465,    -0.5650069742788596,   -0.34473135077832956 ],
    [ -0.9692436362808795,     1.8759675015077202,    0.04155505740717557 ],
    [  0.013444280632031142,  -0.11836239223101838,   1.0151749943912054  ],
  ];

  @return matrix.multiply($M, $XYZ);
}

// Rec. 2020-related functions

@function _lin_2020($val) {
  @if ($val < $I2 * 4.5 ) {
    @return $val / 4.5;
  }

  @return math.pow(($val + $Ip - 1) / $Ip, 2.4);
}

// r2020 [0, 1] <-->
@function lin_2020($RGB) {
  // convert an array of rec2020 RGB values in the range 0.0 - 1.0
  // to linear light (un-companded) form.
  @return array.map($RGB, meta.get-function('_lin_2020'));
}
// check with standard this really is 2.4 and 1/2.4, not 0.45 was wikipedia claims

@function _gam_2020($val) {
  @if ($val > $I2) {
    @return $Ip * math.pow($val, 1/2.4) - ($Ip - 1);
  }

  @return 4.5 * $val;
}

// r2020 [0, 1] <-->
@function gam_2020($RGB) {
  // convert an array of linear-light rec2020 RGB  in the range 0.0-1.0
  // to gamma corrected form
  @return array.map($RGB, meta.get-function('_gam_2020'));
}

// r2020 [0, 1] -> xyz
@function lin_2020_to_XYZ($rgb) {
  // convert an array of linear-light rec2020 values to CIE XYZ
  // using  D65 (no chromatic adaptation)
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  $M: [
    [0.6369580483012914, 0.14461690358620832,  0.1688809751641721],
    [0.2627002120112671, 0.6779980715188708,   0.05930171646986196],
    [0.000000000000000,  0.028072693049087428, 1.060985057710791],
  ];
  // 0 is actually calculated as  4.994106574466076e-17

  @return matrix.multiply($M, $rgb);
}

// xyz -> r2020 [0, 1]
@function XYZ_to_lin_2020($XYZ) {
  // convert XYZ to linear-light rec2020
  $M: [
    [1.7166511879712674,   -0.35567078377639233, -0.25336628137365974],
    [-0.6666843518324892,   1.6164812366349395,   0.01576854581391113],
    [0.017639857445310783, -0.042770613257808524, 0.9421031212354738],
  ];

  @return matrix.multiply($M, $XYZ);
}

// Chromatic adaptation

// xyz <-->
@function D65_to_D50($XYZ) {
  // Bradford chromatic adaptation from D65 to D50
  // The matrix below is the result of three operations:
  // - convert from XYZ to retinal cone domain
  // - scale components from one reference white to another
  // - convert back to XYZ
  // http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html
  $M: [
    [ 1.0478112,  0.0228866, -0.0501270],
    [ 0.0295424,  0.9904844, -0.0170491],
    [-0.0092345,  0.0150436,  0.7521316]
   ];

  @return matrix.multiply($M, $XYZ);
}

// xyz <-->
@function D50_to_D65($XYZ) {
  // Bradford chromatic adaptation from D50 to D65
  $M: [
    [ 0.9555766, -0.0230393,  0.0631636],
    [-0.0282895,  1.0099416,  0.0210077],
    [ 0.0122982, -0.0204830,  1.3299098],
  ];

  @return matrix.multiply($M, $XYZ);
}

// Lab and LCH

@function _XYZ_to_Lab-XYZ(
  $value,
  $i
) {
  @return $value / list.nth($white, $i);
}

@function _XYZ_to_Lab-f(
  $value
) {
  @if ($value > $Im) {
    @return pow.cbrt($value);
  }

  @return ($Io * $value + 16) / 116;
}

// xyz -> l [0+] ab [±160]
@function XYZ_to_Lab($XYZ) {
  // Assuming XYZ is relative to D50, convert to CIE Lab
  // from CIE standard, which now defines these as a rational fraction

  // compute xyz, which is XYZ scaled relative to reference white
  $xyz: array.map($XYZ, get-function('_XYZ_to_Lab-XYZ'), i);

  // now compute f
  $f: array.map($xyz, get-function('_XYZ_to_Lab-f'));

  @return [
    (116 * list.nth($f, 2)) - 16,
    500 * (list.nth($f, 1) - list.nth($f, 2)),
    200 * (list.nth($f, 2) - list.nth($f, 3)),
  ];
}

@function _Lab_to_XYZ(
  $value,
  $i
) {
  @return $value * list.nth($white, $i);
}

// l [0+] ab [±160] -> xyz
@function Lab_to_XYZ($Lab) {
  // Convert Lab to D50-adapted XYZ
  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
  $f: array.template($Lab);

  $Lab0: list.nth($Lab, 1);
  $Lab1: list.nth($Lab, 2);
  $Lab2: list.nth($Lab, 3);

  // compute f, starting with the luminance-related term
  $f1: ($Lab0 + 16) / 116;
  $f0: $Lab1 / 500 + $f1;
  $f2: $f1 - $Lab2 / 200;

  // compute xyz
  $xyz: [
    if(math.pow($f0, 3) > $Im, math.pow($f0, 3), (116 * $f0 - 16) / $Io),
    if($Lab0 > $Io * $Im, math.pow(($Lab0 + 16) / 116, 3), $Lab0 / $Io),
    if(math.pow($f2, 3) > $Im, math.pow($f2, 3), (116 * $f2 - 16) / $Io),
  ];

  // Compute XYZ by scaling xyz by reference white
  @return array.map($xyz, meta.get-function('_Lab_to_XYZ'), i);
}

// l [0+] ab [±160] -> lc [0+] h [0, 360)
@function Lab_to_LCH($Lab) {
  // Convert to polar form
  $Lab0: list.nth($Lab, 1);
  $Lab1: list.nth($Lab, 2);
  $Lab2: list.nth($Lab, 3);

  // L is still L
  // Chroma
  // Hue, in degrees [0 to 360)
  @return [
    $Lab0,
    math.sqrt(math.pow($Lab1, 2) + math.pow($Lab2, 2)),
    (math.atan2($Lab2, $Lab1) / 1deg) % 360,
  ];
}

// lc [0+] h [0, 360) -> l [0+] ab [±160]
@function LCH_to_Lab($LCH) {
  // Convert from polar form
  $LCH0: list.nth($LCH, 1);
  $LCH1: list.nth($LCH, 2);
  $LCH2: list.nth($LCH, 3);

  @return [
    $LCH0,
    $LCH1 * math.cos($LCH2 * math.$pi / 180),
    $LCH1 * math.sin($LCH2 * math.$pi / 180),
  ];
}
