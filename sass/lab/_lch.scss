@use 'sass:map';
@use 'sass:meta';
@use '../config';
@use '../utils/array';
@use '../utils/convert';
@use '../utils/output';
@use '../utils/units';

// to-rgb

@function to-rgb($lch) {
  // convert an array of CIE LCH values
  // to CIE Lab, and then to XYZ,
  // adapt from D50 to D65,
  // then convert XYZ to linear-light sRGB
  // and finally to gamma corrected sRGB
  // for in-gamut colors, components are in the 0.0 to 1.0 range
  // out of gamut colors may have negative components
  // or components greater than 1.0
  // so check for that :)

  @return convert.gam_sRGB(
    convert.XYZ_to_lin_sRGB(
      convert.D50_to_D65(
        convert.Lab_to_XYZ(
          convert.LCH_to_Lab($lch)
        )
      )
    )
  );
}

// in-gamut

@function _in_gamut(
  $a,
  $b
) {
  $E: 0.000005;
  @return $a and ($b >= (0 - $E)) and ($b <= (1 + $E));
}

@function in-gamut($l, $c, $h) {
  $rgb: to-rgb(($l, $c, $h));
  $in: array.reduce(
    $rgb,
    meta.get-function('_in_gamut'),
    true
  );
  @return if($in, $rgb, null);
}

// gamut correction

@function gamut-correct($l, $c, $h) {
  // Moves an lch color into the sRGB gamut
  // by holding the l and h steady,
  // and adjusting the c via binary-search
  // until the color is on the sRGB boundary.
  $rgb: in-gamut($l, $c, $h);
  @if ($rgb) {
    @return (
      'lch': ($l, $c, $h),
      'rgb': $rgb,
    );
  }

  $hiC: $c;
  $loC: 0;

  $c: $c / 2;

  // 0.0001 chosen fairly arbitrarily as "close enough"
  @while (($hiC - $loC) > 0.0001) {
    $rgb: in-gamut($l,$c,$h);
    @if ($rgb) {
      $loC: $c;
    } @else {
      $hiC: $c;
    }
    $c: ($hiC + $loC) / 2;
  }

  @return (
    'lch': ($l, $c, $h),
    'rgb': $rgb or to-rgb(($l, $c, $h)),
  );
}

@function value(
  $lch,
  $a: 100%,
  $gamut-correct: config.$gamut-correct,
  $string: config.$string-output,
) {
  $lch: array.map(
    $lch,
    meta.get-function('strip', $module: 'units')
  );

  $rgb: null;

  @if ($gamut-correct) {
    $rgb: map.get(gamut-correct($lch...), 'rgb');
  } @else if ($gamut-correct == null) {
    @return in-gamut($lch...);
  }

  $rgb: $rgb or to-rgb($lch);

  @return output.value($rgb, $a, $string);
}
