@use 'throw';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

@function template(
  $array,
  $separator: null,
  $brackets: null
) {
  $error: throw.type($array, 'list', 'array.template()', 'array');
  @if ($error) { @return $error; }

  $separator: $separator or list.separator($array);
  $brackets: $brackets or list.is-bracketed($array);

  @return list.join((), (), $separator, $brackets);
}

@function range(
  $start,
  $end,
  $step: 1,
  $include-end: true,
  $separator: null,
  $brackets: null
) {
  $range: template((), $separator, $brackets);
  $i: $start;

  @while if($include-end, $i <= $end, $i < $end) {
    $range: list.append($range, $i);
    $i: $i + $step;
  }

  @return $range;
}

@function from-string(
  $string,
  $separator: null,
  $limit: null
) {
  $list: ();

  @if (not $separator) or ($string == '') {
    @return list.append($list, $string);
  }

  $length: string.length($string);
  $limit: if($limit, math.min($limit, $length), $length);
  $index: string.index($string, $separator);

  @for $i from 1 through $limit {
    @if ($string) {
      $slice: null;

      @if ($separator == '') {
        $length: string.length($string);

        @if ($length > 1) {
          $slice: string.slice($string, 1, 1);
          $string: string.slice($string, 2);
        } @else {
          $slice: if(($length == 1), $string, '');
          $string: null;
        }
      } @else if ($index) {
        $slice: string.slice($string, 1, $index - 1);
        $string: string.slice($string, $index + string.length($separator));
        $index: string.index($string, $separator);
        $slice: if($string and not $index, $slice $string, $slice);
      }

      $list: if($slice, list.join($list, $slice), $list);
    }
  }

  @return $list;
}

@function slice(
  $array,
  $begin,
  $end: null
) {
  $error: throw.type($array, 'list', 'array.slice()', 'array');
  @if ($error) { @return $error; }
  $error: throw.type($begin, 'number', 'array.slice()', 'begin');
  @if ($error) { @return $error; }

  $length: list.length($array);
  $end: $end or $length;

  $error: throw.type($end, 'number', 'array.slice()', 'end');
  @if ($error) { @return $error; }

  $slice: template($array);

  @for $i from ($begin + 1) through math.min($end, $length) {
    $slice: list.append($slice, list.nth($array, $i));
  }

  @return $slice;
}

@function join(
  $array,
  $separator: ''
) {
  $error: throw.type($array, 'list', 'array.join()', 'array');
  @if ($error) { @return $error; }

  $return: '';
  $first: true;
  @each $item in $array {
    $return: '#{$return}#{if($first, '', $separator)}#{$item}';
    $first: false;
  }
  @return $return;
}

@function _args(
  $call: (),
  $index,
  $args...
) {
  $i: list.index($args, 'i') or list.index($args, 'index');

  @if (list.length($args)) {
    @if ($i) {
      $args: list.set-nth($args, $i, $index);
    }

    $call: list.join($call, $args);
  }

  @return $call;
}

@function map(
  $array,
  $function,
  $args...
) {
  $error: throw.type($array, 'list', 'array.map()', 'array');
  @if ($error) { @return $error; }

  $error: throw.type($function, 'function', 'array.map()', 'function');
  @if ($error) { @return $error; }

  $mapped: template($array);
  $i: 1;

  @each $value in $array {
    $call: _args(($function, $value), $i, $args...);
    $mapped: list.append($mapped, meta.call($call...));
    $i: $i + 1;
  }

  @return $mapped;
}

@function reduce(
  $array,
  $function,
  $accumulator: null,
  $args...
) {
  $error: throw.type($array, 'list', 'array.reduce()', 'array');
  @if ($error) { @return $error; }

  $error: throw.type($function, 'function', 'array.reduce()', 'function');
  @if ($error) { @return $error; }

  $i: 1;

  @each $value in $array {
    @if ($i == 1) and ($accumulator == null) {
      $accumulator: $value;
    } @else {
      $call: _args(($function, $accumulator, $value), $i, $args...);
      $accumulator: meta.call($call...);
    }

    $i: $i + 1;
  }

  @return $accumulator;
}

@function _add(
  $a,
  $b
) {
  @return $a + $b;
}

@function _subtract(
  $a,
  $b
) {
  @return $a - $b;
}

@function _multiply(
  $a,
  $b
) {
  @return $a * $b;
}

@function _divide(
  $a,
  $b
) {
  @return $a / $b;
}

@function _math(
  $function,
  $a,
  $b
) {
  @return meta.call(get-function('_#{$function}'), $a, $b);
}

@function math(
  $function,
  $a,
  $b
) {
  $ta: meta.type-of($a);
  $tb: meta.type-of($b);

  @if ($ta == $tb) {
    @if ($ta == 'number') {
      @return _math($function, $a, $b);
    }

    @if ($ta == 'list') {
      $a-length: list.length($a);
      $b-length: list.length($b);

      @if ($a-length == $b-length) {
        $result: template($a);

        @for $i from 1 through $a-length {
          $sum: _math($function, list.nth($a, $i), list.nth($b, $i));
          $result: list.append($result, $sum);
        }

        @return $result;
      }

      // treat single-item lists as single values
      @if ($a-length == 1) {
        @return math($function, nth($a, 1), $b);
      }

      @if ($b-length == 1) {
        @return math($function, $a, nth($b, 1));
      }

      @return throw.error(
        '$a and $b must have an equal length if both are lists',
        'array.add()'
      );
    }
  }

  $tab: ($ta, $tb);
  $ni: list.index($tab, 'number');
  $li: list.index($tab, 'list');

  @if ($ni and $li) {
    $ab: ($a, $b);
    $n: list.nth($ab, $ni);
    $l: list.nth($ab, $li);
    $result: template($l);

    @each $item in $l {
      $result: list.append($result, _math($function, $item, $n));
    }

    @return $result;
  }

  @return throw.error(
    'Failed to #{$function} values: `#{$a}` and `#{$b}`',
    'array.add()'
  );
}

@function add(
  $a,
  $b
) {
  @return math('add', $a, $b);
}

@function multiply(
  $a,
  $b
) {
  @return math('multiply', $a, $b);
}

@function sum(
  $array
) {
  $error: throw.type($array, 'list', 'array.sum()', 'array');
  @if ($error) { @return $error; }

  @return reduce($array, get-function('add'), 0);
}

@function average(
  $array
) {
  $error: throw.type($array, 'list', 'array.average()', 'array');
  @if ($error) { @return $error; }

  @return sum($array) / list.length($array);
}

@function product(
  $array
) {
  $error: throw.type($array, 'list', 'array.sum()', 'array');
  @if ($error) { @return $error; }

  @return reduce($array, get-function('multiply'));
}
