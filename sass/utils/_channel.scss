@use 'array';
@use 'throw';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

// half-open
@function deg6(
  $val
) {
  @return ((($val + 1) % 360) - 1) / 60;
}

// fractions
// ---------

@function fraction(
  $value,
  $range: 100,
) {
  @return $value / $range;
}

@function fractions(
  $values,
  $range: 100,
) {
  @return array.map($values, meta.get-function('fraction'), $range);
}

// Format
// ------
@function _format(
  $val,
  $i,
  $units,
  $decimals,
) {
  $unit: if(meta.type-of($units) == 'number', $units, list.nth($units, $i));
  $decimals: if($decimals, math.pow(10, $decimals), 1);
  @return math.round($val * $unit * $decimals) / $decimals;
}

@function format(
  $channels,
  $units: 100%,
  $decimals: 2,
) {
  @return array.map(
    $channels,
    meta.get-function('_format'),
    i,
    $units,
    $decimals
  );
}

// Validation
// ----------

@function valid(
  $channels,
  $source,
  $name,
  $count: 3
) {
  // type-of list
  $error: throw.type($channels, 'list', $source, $name);
  @if ($error) { @return $error; }

  // length == $count
  $length: list.length($channels);
  @if ($length != $count) {
    @return throw.error(
      '$#{$name} expects #{$count} channels, got #{$length}',
      $source
    );
  }

  // each channel is a number
  @each $c in $channels {
    $c-type: meta.type-of($c);
    @if ($c-type != 'number') {
      @return throw.type($c, 'number', $source, '#{$name} channels');
    }
  }

  @return $channels;
}
