@use 'array';
@use 'throw';
@use 'units';
@use 'sass:list';
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';

// half-open
@function deg6(
  $val
) {
  @return ((($val + 1) % 360) - 1) / 60;
}

@function deg(
  $val
) {
  @return $val * 60;
}

// fractions
// ---------

@function fraction(
  $value,
  $range: 100,
) {
  @return $value / $range;
}

@function fractions(
  $values,
  $range: 100,
) {
  @return array.map($values, meta.get-function('fraction'), $range);
}

// Values
// ------

@function value(
  $fraction,
  $factor: 100,
  $decimals: 100,
) {
  $value: $fraction * $factor;
  @return if(
    $decimals,
    math.round($value * $decimals) / $decimals,
    $value
  );
}

@function values(
  $values,
  $factor: 100,
  $decimals: 100,
) {
  @return array.map($values, meta.get-function('value'), $factor, $decimals);
}

// gamuts
// ------

$gamuts: (
  'lab': (0 400, -160 160, -160 160),
  'lch': (0 400, 0 230, 0 360),
);

@function _in_gamut(
  $a,
  $val,
  $ranges,
  $index,
) {
  $E: 0.000005;
  $range: if($ranges, list.nth($ranges, $index), 0 1);
  $min: (math.min($range...) - $E);
  $max: (math.max($range...) + $E);
  @return $a and ($val == math.clamp($min, $val, $max));
}

@function in-gamut(
  $array,
  $format: 'rgb',
) {
  @return array.reduce(
    $array,
    meta.get-function('_in_gamut'),
    true,
    map.get($gamuts, $format),
    i
  );
}

// Units
// -----

$formats: (
  'rgb': 1% 1% 1%,
  'hsl': 1deg 1% 1%,
  'hwb': 1deg 1% 1%,
  'lab': 1% 1 1,
  'lch': 1% 1 1,
);

@function _unit(
  $x,
  $i,
  $format: 'rgb',
) {
  $format: map.get($formats, $format);
  $unit: if($format, list.nth($format, $i), 1);
  @return $x * $unit;
}

@function units(
  $channels,
  $format: 'rgb',
) {
  @return array.map(
    $channels,
    meta.get-function('_unit'),
    i,
    $format
  );
}

@function alpha(
  $a: 100%
) {
  @return if(math.is-unitless($a), percentage($a), $a);
}

@function format(
  $channels,
  $format: 'rgb',
) {
  @if list.index('display-p3' 'rec-2020' 'device-cmyk', $format) {
    $channels: values($channels, 1, 10000);
  } @else if list.index('lch' 'lab', $format) {
    $channels: values($channels, 1, 100);
  } @else {
    $channels: values($channels);
  }
  @return units($channels, $format);
}

// Validation
// ----------

@function valid(
  $channels,
  $source,
  $name,
  $count: 3
) {
  // type-of list
  $error: throw.type($channels, 'list', $source, $name);
  @if ($error) { @return $error; }

  // length == $count
  $length: list.length($channels);
  @if ($length != $count) {
    @return throw.error(
      '$#{$name} expects #{$count} channels, got #{$length}',
      $source
    );
  }

  // each channel is a number
  @each $c in $channels {
    $c-type: meta.type-of($c);
    @if ($c-type != 'number') {
      @return throw.type($c, 'number', $source, '#{$name} channels');
    }
  }

  @return $channels;
}

