@use '../node_modules/sass-true/sass/true' as *;
@use '../sass/output';
@use 'sass:string';

@include describe('output') {
  @include describe('string()') {
    @include it('Converts rgb/a channels to rgb string') {
      @include assert-equal(
        output.string(.55555 .66666 .77777, 0.5, 'rgb'),
        string.unquote('rgb(55.56% 66.67% 77.78% / 50%)')
      );
    }

    @include it('Converts hsl/a channels to hsl string') {
      @include assert-equal(
        output.string(.55555 .66666 .77777, 0.5, 'hsl'),
        string.unquote('hsl(55.56deg 66.67% 77.78% / 50%)')
      );
    }

    @include it('Converts hwb/a channels to hwb string') {
      @include assert-equal(
        output.string(.55555 .66666 .77777, 0.5, 'hwb'),
        string.unquote('hwb(55.56deg 66.67% 77.78% / 50%)')
      );
    }

    @include it('Converts lab/a channels to lab string') {
      @include assert-equal(
        output.string(55.55 66.66 77.77, 0.5, 'lab'),
        string.unquote('lab(55.55% 66.66 77.77 / 50%)')
      );
    }

    @include it('Converts lch/a channels to lch string') {
      @include assert-equal(
        output.string(55.55 66.66 77.77, 0.5, 'lch'),
        string.unquote('lch(55.55% 66.66 77.77 / 50%)')
      );
    }

    @include it('Converts p3/a channels to p3 string') {
      @include assert-equal(
        output.string(0.3804 0.9921 0.1412, 0.5, 'display-p3'),
        string.unquote('color(display-p3 0.3804 0.9921 0.1412 / 50%)')
      );
    }

    @include it('Converts r2020/a channels to r2020 string') {
      @include assert-equal(
        output.string(0.3804 0.9921 0.1412, 0.5, 'rec-2020'),
        string.unquote('color(rec-2020 0.3804 0.9921 0.1412 / 50%)')
      );
    }

    @include it('Converts cmyk/a channels to cmyk string') {
      @include assert-equal(
        output.string(0.3804 0.9921 0.1412 0.2, 0.5, 'device-cmyk'),
        string.unquote('device-cmyk(0.3804 0.9921 0.1412 0.2 / 50%)')
      );
    }
  }
}
