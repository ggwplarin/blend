@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/convert/steps';

@include describe('convert/steps') {
  @include describe('lin_sRGB()') {
    @include it('converts rgb channels to linear-light') {
      @include assert-equal(
        steps.lin_sRGB([ 0.02, 0.5, 0.8 ]),
        [ 0.0015479876160990713, 0.21404114048223255, 0.6038273388553378 ]
      )
    }
  }

  @include describe('gam_sRGB()') {
    @include it('gamma-corrects linear-light rgb channels') {
      @include assert-equal(
        steps.gam_sRGB([ 0.02, 0.5, 0.8 ]),
        [ 0.15170371931624205, 0.7353569830524495, 0.9063317533440594 ]
      )
    }
  }

  @include describe('lin_sRGB_to_XYZ()') {
    @include it('converts linear-light rgb values to CIE XYZ') {
      @include assert-equal(
        steps.lin_sRGB_to_XYZ([ 0.02, 0.5, 0.8 ]),
        [ 0.331387178, 0.419569558, 0.8202259580000001 ]
      )
    }
  }

  @include describe('XYZ_to_lin_sRGB()') {
    @include it('convert XYZ to linear-light sRGB') {
      @include assert-equal(
        steps.XYZ_to_lin_sRGB([ 0.02, 0.5, 0.8 ]),
        [ -1.102585286, 0.9518648799999999, 0.744880078 ]
      )
    }
  }

  @include describe('lin_P3_to_XYZ()') {
    @include it('convert linear-light display-p3 values to CIE XYZ') {
      @include assert-equal(
        steps.lin_P3_to_XYZ([ 0.02, 0.5, 0.8 ]),
        [ 0.3011390937450008, 0.41387828347464417, 0.8577121860502321 ]
      )
    }
  }

  @include describe('XYZ_to_lin_P3()') {
    @include it('convert XYZ to linear-light P3') {
      @include assert-equal(
        steps.XYZ_to_lin_P3([ 0.02, 0.5, 0.8 ]),
        [ -0.737990498281307, 0.8836419994414965, 0.7281383411770046 ]
      )
    }
  }

  @include describe('lin_ProPhoto()') {
    @include it('convert an array of prophoto-rgb values to linear light') {
      @include assert-equal(
        steps.lin_ProPhoto([ 0.02, 0.5, 0.8 ]),
        [ 0.00125, 0.2871745887492587, 0.669209313658415 ]
      )
    }
  }

  @include describe('gam_ProPhoto()') {
    @include it('gamma-correct an array of linear-light prophoto-rgb') {
      @include assert-equal(
        steps.gam_ProPhoto([ 0.02, 0.5, 0.8 ]),
        [ 0.11379620405527816, 0.6803950000871885, 0.8834075444455188 ]
      )
    }
  }

  @include describe('lin_ProPhoto_to_XYZ()') {
    @include it('converts linear-light prophoto-rgb values to CIE XYZ') {
      @include assert-equal(
        steps.lin_ProPhoto_to_XYZ([ 0.02, 0.5, 0.8 ]),
        [ 0.10862760804653605, 0.3617515546381208, 0.6600836820083682 ]
      )
    }
  }

  @include describe('XYZ_to_lin_ProPhoto()') {
    @include it('converts XYZ to linear-light prophoto-rgb') {
      @include assert-equal(
        steps.XYZ_to_lin_ProPhoto([ 0.02, 0.5, 0.8 ]),
        [ -0.14175909863195832, 0.7596527466917661, 0.9695740365111564 ]
      )
    }
  }

  @include describe('lin_a98rgb()') {
    @include it('converts a98-rgb values to linear-light') {
      @include assert-equal(
        steps.lin_a98rgb([ 0.02, 0.5, 0.8 ]),
        [ 0.00018348193467219382, 0.21775552814439456, 0.6121723111134431 ]
      )
    }
  }

  @include describe('gam_a98rgb()') {
    @include it('gamma-corrects an array of linear-light a98-rgb') {
      @include assert-equal(
        steps.gam_a98rgb([ 0.02, 0.5, 0.8 ]),
        [ 0.16883658916733524, 0.7296583817678015, 0.9035128753395815 ]
      )
    }
  }

  @include describe('lin_a98rgb_to_XYZ()') {
    @include it('converts linear-light a98-rgb values to CIE XYZ') {
      @include assert-equal(
        steps.lin_a98rgb_to_XYZ([ 0.02, 0.5, 0.8 ]),
        [ 0.25489541679947153, 0.37986184942794204, 0.8289550829657529 ]
      )
    }
  }

  @include describe('XYZ_to_lin_a98rgb()') {
    @include it('convert XYZ to linear-light a98-rgb') {
      @include assert-equal(
        steps.XYZ_to_lin_a98rgb([ 0.02, 0.5, 0.8 ]),
        [ -0.5174568096858785, 0.951842923953983, 0.7532276850100957 ]
      )
    }
  }

  @include describe('lin_2020()') {
    @include it('convert rec2020 RGB values to linear-light') {
      @include assert-equal(
        steps.lin_2020([ 0.02, 0.5, 0.8 ]),
        [ 0.0044444444444444444, 0.233165778158119, 0.6175774187196106 ]
      )
    }
  }

  @include describe('gam_2020()') {
    @include it('gamma-correct linear-light rec2020 RGB') {
      @include assert-equal(
        steps.gam_2020([ 0.02, 0.5, 0.8 ]),
        [ 0.11608586772520829, 0.7242452807888918, 0.9023988565671286 ]
      )
    }
  }

  @include describe('lin_2020_to_XYZ()') {
    @include it('convert linear-light rec2020 values to CIE XYZ') {
      @include assert-equal(
        steps.lin_2020_to_XYZ([ 0.02, 0.5, 0.8 ]),
        [ 0.22015239289046767, 0.3916944131755503, 0.8628243926931766 ]
      )
    }
  }

  @include describe('XYZ_to_lin_2020()') {
    @include it('convert XYZ to linear-light rec2020') {
      @include assert-equal(
        steps.XYZ_to_lin_2020([ 0.02, 0.5, 0.8 ]),
        [ -0.34619539322769866, 0.8075217679319489, 0.7326499875083811 ]
      )
    }
  }

  @include describe('D65_to_D50()') {
    @include it('Bradford chromatic adaptation from D65 to D50') {
      @include assert-equal(
        steps.D65_to_D50([ 0.02, 0.5, 0.8 ]),
        [ -0.007702076000000002, 0.482193768, 0.60904239 ]
      )
    }
  }

  @include describe('D50_to_D65()') {
    @include it('Bradford chromatic adaptation from D50 to D65') {
      @include assert-equal(
        steps.D50_to_D65([ 0.02, 0.5, 0.8 ]),
        [ 0.058122762, 0.5212111700000001, 1.0539323040000002 ]
      )
    }
  }

  @include describe('XYZ_to_Lab()') {
    @include it('Assuming XYZ is relative to D50, convert to CIE Lab') {
      @include assert-equal(
        steps.XYZ_to_Lab([ 0.02, 0.5, 0.8 ]),
        [ 76.06926101415557, -259.4709655459667, -39.20214239220301 ]
      )
    }
  }

  @include describe('Lab_to_XYZ()') {
    @include it('Convert Lab to D50-adapted XYZ') {
      @include assert-equal(
        steps.Lab_to_XYZ([ 1.02, 0.5, 1.8 ]),
        [ 0.0012126186329902817, 0.001129197589077043, -0.00002192529747017181 ]
      )
    }
  }

  @include describe('Lab_to_LCH()') {
    @include it('Convert to polar form') {
      @include assert-equal(
        steps.Lab_to_LCH([ 20, 50, 80 ]),
        [ 20, 94.33981132056604, 57.9946167919165 ]
      )
    }
  }

  @include describe('LCH_to_Lab()') {
    @include it('Convert from polar form') {
      @include assert-equal(
        steps.LCH_to_Lab([ 20, 50, 80 ]),
        [ 20, 8.68240888334652, 49.2403876506104 ]
      )
    }
  }
}
