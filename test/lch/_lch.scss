@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/lch/lch';
@use 'sass:meta';

@include describe('lch/lch') {
  @include describe('to-rgb()') {
    @include it('converts an array of lch values to sRGB') {
      @include assert-equal(
        lch.to-rgb([ 50, 50, 50 ]),
        [ 0.6998182949215365, 0.37306358392607797, 0.21448501707165485 ]
      );
    }
  }

  @include describe('in-gamut()') {
    @include it('Returns RGB values for in-gamut LCH colors') {
      @include assert-equal(
        lch.in-gamut(30, 50, 300),
        [0.3034570655, 0.2260585045, 0.5459735834],
        $inspect: true
      );
    }

    @include it('Returns null for out-of-gamut LCH colors') {
      @include assert-equal(
        lch.in-gamut(80, 80, 300),
        null
      );
    }
  }

  @include describe('gamut-correct()') {
    @include it('Returns LCH input & RGB results for in-gamut colors') {
      @include assert-equal(
        lch.gamut-correct(30, 50, 300),
        (
          'lch': (30, 50, 300),
          'rgb': [0.3034570655, 0.2260585045, 0.5459735834],
        ),
        $inspect: true
      );
    }

    @include it('Returns corrected LCH & RGB for iout-of-gamut colors') {
      @include assert-equal(
        lch.gamut-correct(80, 80, 300),
        (
          'lch': (80, 34.7755050659, 300),
          'rgb': [0.8223957484, 0.739750038, 1.0000045534],
        ),
        $inspect: true
      );
    }
  }

  @include describe('color()') {
    @include it('Converts in-gamut LCH/a input to (sRGB) Sass color') {
      @include assert-equal(
        meta.type-of(lch.color(30% 50 300)),
        'color'
      );

      @include assert-equal(
        lch.color(30% 50 300),
        #4d3a8b
      );
    }

    @include it('Converts out-of-gamut LCH/a input to (sRGB) Sass color') {
      @include assert-equal(
        lch.color(80% 80 300),
        #d2bdff
      );
    }

    @include it('Accepts an alpha channel') {
      @include assert-equal(
        lch.color(30% 50 300, 50%),
        rgba(77, 58, 139, 0.5)
      );
    }

    @include it('Optionally allows out-of-gamut colors to clip') {
      @include assert-equal(
        lch.color(80% 80 300, $force: false),
        #d8aeff
      );
    }
  }
}
