@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/utils/array';
@use 'sass:list';

@function _map(
  $e,
  $start: 0,
  $i: 1,
) {
  $key: ($i + $start);
  @return ($key: $e);
}

$_map: get-function('_map');

@function _reducer(
  $acc,
  $value,
  $offset: 0
) {
  $acc: if($acc == null, 1, $acc);
  @return $acc * $value + $offset;
}

$_reducer: get-function('_reducer');

@include describe('utils/array') {
  @include describe('template()') {
    @include it('Returns an empty list of the same type as $array') {
      $comma: array.template((1, 2, 3));
      @include assert-equal(
        list.length($comma),
        0
      );
      @include assert-equal(
        list.separator($comma),
        'comma'
      );
      @include assert-equal(
        list.is-bracketed($comma),
        false
      );

      $space: array.template([ 1 2 3 ]);
      @include assert-equal(
        list.length($space),
        0
      );
      @include assert-equal(
        list.separator($space),
        'space'
      );
      @include assert-equal(
        list.is-bracketed($space),
        true
      );
    }

    @include it('Allows you to override separator') {
      @include assert-equal(
        list.separator(array.template(())),
        'space'
      );
      @include assert-equal(
        list.separator(array.template((), 'comma')),
        'comma'
      );
    }

    @include it('Allows you to override brackets') {
      @include assert-equal(
        list.is-bracketed(array.template(())),
        false
      );
      @include assert-equal(
        list.is-bracketed(array.template((), $brackets: true)),
        true
      );
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.template(7),
        'ERROR [array.template()] $array must be a list, got number: 7'
      )
    }
  }

  @include describe('range()') {
    @include it('Generates an array of numbers') {
      @include assert-equal(
        array.range(1, 5),
        (1 2 3 4 5)
      );
    }

    @include it('Accepts different steps') {
      @include assert-equal(
        array.range(1, 10, 2),
        (1 3 5 7 9)
      );
    }

    @include it('Can exclude the end value') {
      @include assert-equal(
        array.range(5, 10, $include-end: false),
        (5 6 7 8 9)
      );
    }

    @include it('Can use any delimiter') {
      @include assert-equal(
        array.range(5, 10, $separator: comma),
        (5, 6, 7, 8, 9, 10)
      );
    }

    @include it('Can use brackets') {
      @include assert-equal(
        array.range(5, 10, $brackets: true),
        [5 6 7 8 9 10]
      );
    }
  }

  @include describe('slice()') {
    $animals: ['ant', 'bison', 'camel', 'duck', 'elephant'];

    @include it('Slices from after the beginning index') {
      @include assert-equal(
        array.slice($animals, 2),
        ['camel', 'duck', 'elephant']
      );
    }

    @include it('Slices from beginning through end') {
      @include assert-equal(
        array.slice($animals, 2, 4),
        ['camel', 'duck']
      );
    }

    @include it('Handles extra-large end index') {
      @include assert-equal(
        array.slice($animals, 2, 10),
        ['camel', 'duck', 'elephant']
      );
    }
  }

  @include describe('join()') {
    $array: (Miriam 37 Suzanne);

    @include it('Merges array values into a string') {
      @include assert-equal(
        array.join($array),
        'Miriam37Suzanne'
      );
    }

    @include it('Accepts a delimiter') {
      @include assert-equal(
        array.join($array, '::'),
        'Miriam::37::Suzanne'
      );
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.join(7),
        'ERROR [array.join()] $array must be a list, got number: 7'
      )
    }
  }

  @include describe('map()') {
    $array: [1 2 3 4 5];

    @include it('Runs array items through a function') {
      @include assert-equal(
        array.map($array, $_map),
        [ (1: 1) (1: 2) (1: 3) (1: 4) (1: 5) ]
      );
    }

    @include it('Accepts arbitrary arguments') {
      @include assert-equal(
        array.map($array, $_map, 2, 3),
        [ (5: 1) (5: 2) (5: 3) (5: 4) (5: 5) ]
      );
    }

    @include it('Replaces first instance of `i` or `index` with array index') {
      @include assert-equal(
        array.map($array, $_map, 2, i),
        [ (3: 1) (4: 2) (5: 3) (6: 4) (7: 5) ]
      );
      @include assert-equal(
        array.map($array, $_map, 2, 'index'),
        [ (3: 1) (4: 2) (5: 3) (6: 4) (7: 5) ]
      );
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.map(7, $_map),
        'ERROR [array.map()] $array must be a list, got number: 7'
      )
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.map(1 2 3, 7),
        'ERROR [array.map()] $function must be a function, got number: 7'
      )
    }
  }

  @include describe('reduce()') {
    $array: 2 4 6;
    @include it('Combines array items through a reducer function') {
      @include assert-equal(
        array.reduce($array, $_reducer),
        48
      );
    }

    @include it('Accepts an initial value') {
      @include assert-equal(
        array.reduce($array, $_reducer, 2),
        96
      );
    }

    @include it('Accepts arbitrary arguments') {
      @include assert-equal(
        array.reduce($array, $_reducer, 2, 1),
        127
      );
    }

    @include it('Accepts array index') {
      @include assert-equal(
        array.reduce($array, $_reducer, 2, i),
        135
      );
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.reduce(7, $_reducer),
        'ERROR [array.reduce()] $array must be a list, got number: 7'
      )
    }

    @include it('Throws an error when $array is not a list') {
      @include assert-equal(
        array.reduce(1 2 3, 7),
        'ERROR [array.reduce()] $function must be a function, got number: 7'
      )
    }
  }

  @include describe('add()') {
    @include it('Adds two numbers') {
      @include assert-equal(
        array.add(2, 4),
        6
      );
    }
    @include it('Adds equal-length lists') {
      @include assert-equal(
        array.add((2 4), (6, 8)),
        (8 12)
      );
    }
    @include it('Adds a number to each item in a list') {
      @include assert-equal(
        array.add((2 4 6), 6),
        (8 10 12)
      );
    }
  }

  @include describe('sum()') {
    @include it('Returns the sum of numbers in a list') {
      @include assert-equal(
        array.sum(2 4 6 8),
        20
      );
    }

    @include it('Returns the sum of numbers and lists') {
      @include assert-equal(
        array.sum(2 (4 6) 8),
        (14 16)
      );
    }

    @include it('Returns the sum of sub-lists') {
      @include assert-equal(
        array.sum((2 4) (6 8)),
        (8 12)
      );
    }
  }

  @include describe('product()') {
    @include it('Returns the product of numbers in a list') {
      @include assert-equal(
        array.product(2 4 6 8),
        384
      );
    }

    @include it('Returns the product of numbers and lists') {
      @include assert-equal(
        array.product(2 (4 6) 8),
        (64 96)
      );
    }

    @include it('Returns the product of sub-lists') {
      @include assert-equal(
        array.product((2 4) (6 8)),
        (12 32)
      );
    }
  }
}
