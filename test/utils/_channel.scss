@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/utils/channel';

@include describe('utils/channel') {
  @include describe('deg6') {
    @include it('Converts degrees to a half-open range [0,6)') {
      @include assert-equal(
        channel.deg6(3),
        0.05
      );
      @include assert-equal(
        channel.deg6(180),
        3
      );
    }

    @include it('Range is half-open') {
      @include assert-equal(
        channel.deg6(0),
        0
      );
      @include assert-equal(
        channel.deg6(360),
        0
      );
    }

    @include it('Handles out-of-range numbers') {
      @include assert-equal(
        channel.deg6(-20),
        channel.deg6(340)
      );
      @include assert-equal(
        channel.deg6(700),
        channel.deg6(340)
      );
    }
  }

  @include describe('fraction()') {
    @include it('generates a fraction') {
      @include assert-equal(
        channel.fraction(30),
        0.3
      );
    }

    @include it('generates a fraction based on a range') {
      @include assert-equal(
        channel.fraction(30, 300),
        0.1
      );
    }
  }

  @include describe('fractions()') {
    @include it('generates channel fractions') {
      @include assert-equal(
        channel.fractions(30 45 82),
        0.3 0.45 0.82
      );
    }

    @include it('generates achannel fractions based on a range') {
      @include assert-equal(
        channel.fractions(30 60 90, 300),
        0.1 0.2 0.3
      );
    }
  }

  @include describe('format()') {
    @include it('Formats the proper values/units for rgb') {
      @include assert-equal(
        channel.format(0.25 1 0.5432101),
        25% 100% 54.32%
      );
    }

    @include it('Can generate hsl format') {
      @include assert-equal(
        channel.format(5 1 0.5432101, 60deg 100% 100%),
        300deg 100% 54.32%
      );
    }

    @include it('Can generate color() formats') {
      @include assert-equal(
        channel.format(0.1234321 1 0.5432101, 1, 4),
        0.1234 1 0.5432
      );
    }
  }

  @include describe('valid()') {
    @include it('Returns a valid list of channels') {
      @include assert-equal(
        channel.valid(30 45 2, 'test', 'rgb'),
        30 45 2
      );
    }

    @include it('Allows different channel-count') {
      @include assert-equal(
        channel.valid(30 45 2 24, 'test', 'rgb', 4),
        30 45 2 24
      );
    }

    @include it('Throws when not a list') {
      @include assert-equal(
        channel.valid('string', 'test', 'rgb'),
        'ERROR [test] $rgb must be a list, got string: string'
      );
    }

    @include it('Throws when wrong length list') {
      @include assert-equal(
        channel.valid(30 42, 'test', 'rgb'),
        'ERROR [test] $rgb expects 3 channels, got 2'
      );
    }

    @include it('Throws when channels are not numbers') {
      @include assert-equal(
        channel.valid(30 42 'red', 'test', 'rgb'),
        'ERROR [test] $rgb channels must be a number, got string: red'
      );
    }
  }
}
